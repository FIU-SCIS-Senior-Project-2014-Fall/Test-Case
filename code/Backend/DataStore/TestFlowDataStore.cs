using DataStore.EntityData;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Principal;
using System.Text;

public class TestFlowDataStore : DataStoreAdapter
{
    public int Id
    {
        get;
        set;
    }
    public string Name
    {
        get;
        set;
    }
    public Uri Host
    {
        get;
        set;
    }

    public TF_User User
    {
        get;
        set;
    }

    public TestFlowDataStore(string Username)
    {
        // get user information
        using (var context = new testflowEntities())
        {
            var user = (from u in context.TF_User where u.Username.Equals(Username) select u).FirstOrDefault();
            if(user == null)
            {
                User = new TF_User();
                User.Username = Username;
                context.TF_User.Add(User);
                try
                { 
                    context.SaveChanges();
                }
                catch(Exception e)
                {
                    // this probably happend because of multiple ajax calls and the unique constraint.
                }
                User = (from u in context.TF_User where u.Username == Username select u).FirstOrDefault();
            }
            else
                User = user;
        }
    }

	public virtual void insertItem(TestPlan testPlan, TestItemBase testElement)
	{
		throw new System.NotImplementedException();
	}

	public virtual void editItem(TestItemBase item)
	{
		throw new System.NotImplementedException();
	}

	public virtual void removeItem(TestStep step)
	{
		throw new System.NotImplementedException();
	}

    public List<Project> getProjects()
    {
        using(var context = new testflowEntities())
        {
            IQueryable<TF_Projects> projects = context.TF_Projects.Where(p => p.TF_Collections.TF_User_Permissions.Any(c => c.User_Id == User.User_Id));

            List<Project> results = new List<Project>();
            foreach(TF_Projects p in projects)
            {
                Project project = new Project();
                project.Id = p.Project_Id;
                project.Name = p.Name;
                project.Store = "Test Flow Model";
                results.Add(project);
            }

            return results;
        }
        
    }

    public List<TestPlan> getPlans(string projectName)
    {
        throw new System.NotImplementedException();
    }

    public TestPlan getPlan(string projectName, int id)
    {
        throw new System.NotImplementedException();
    }

    // unique to this adapter
    public void SyncProjects(List<Project> externalProjects, int collectionId)
    {
        using(var context = new testflowEntities())
        {
            int projItemType = Convert.ToInt32(ItemTypes.Project);
            
            // get all projects and external ids that relate to this collection
            var projects = from e in context.TF_ExternalIds 
                           join p in context.TF_Projects on e.Internal_Id equals p.Project_Id 
                           where e.Type == projItemType && p.Collection_Id == collectionId
                           select new { Project = p, ExternalId = e};

            // N^2 but not expecting many projects per collection
            foreach(Project p in externalProjects)
            {
                bool exist = false;
                foreach(var ip in projects)
                {
                    if(ip.ExternalId.Id == p.Id)
                    {
                        exist = true;
                        if(!ip.Project.Name.Equals(p.Name))
                        {
                            ip.Project.Name = p.Name;  // only occasion where data flows in reverse besides data that doesn't exist
                        }
                    }
                }

                if(!exist)
                {
                    TF_Projects proj = new TF_Projects();
                    proj.Name = p.Name;
                    proj.Collection_Id = collectionId;
                    context.TF_Projects.Add(proj);
                    try
                    {
                        context.SaveChanges();
                        TF_ExternalIds externId = new TF_ExternalIds();
                        externId.Internal_Id = proj.Project_Id;
                        externId.Id = p.Id;
                        externId.Type = projItemType;
                        context.TF_ExternalIds.Add(externId);
                        context.SaveChanges();
                    }
                    catch(Exception e)
                    {

                    }
                    
                    
                }
            }
            try
            {
                context.SaveChanges();
            }
            catch(Exception e)
            {

            }
        }
        
    }
    public void CreateProject(Project project)
    {

    }
    public void CreateCollection(Collection collection, int type)
    {
        TF_Collections dbCollection = new TF_Collections();
        dbCollection.Host = collection.Host.ToString();
        dbCollection.Name = collection.Name;
        dbCollection.Type_Id = type;

        using(var context = new testflowEntities())
        {
            context.TF_Collections.Add(dbCollection);
            try
            {
                context.SaveChanges();
                CreatePermission(dbCollection.Collection_Id);
            }
            catch(Exception e)
            {

            }
        }
    }

    public void EditCollection(Collection collection)
    {
        using (var context = new testflowEntities())
        {
            var dbCollection = context.TF_Collections.Find(collection.Id);
            dbCollection.Name = collection.Name;
            dbCollection.Host = collection.Host;
            try
            {
                context.SaveChanges();
            }
            catch (Exception e)
            {

            }
        }
    }

    public Collection GetCollection(int id)
    {
        using (var context = new testflowEntities())
        {
            Collection collection = new Collection();
            var dbCollection = context.TF_Collections.Find(id);
            collection.Name = dbCollection.Name;
            collection.Host = dbCollection.Host;
            collection.Id = dbCollection.Collection_Id;

            return collection;
        }
    }

    public List<Collection> GetCollections()
    {
        using (var context = new testflowEntities())
        {
            var permissions = from p in context.TF_User_Permissions where p.User_Id == User.User_Id select p.Collection_Id;
            var dbCollections = context.TF_Collections.Where(p => permissions.Contains(p.Collection_Id));
            List<Collection> collections = new List<Collection>();

            foreach(TF_Collections c in dbCollections)
            {
                Collection collection = new Collection();
                collection.Id = c.Collection_Id;
                collection.Name = c.Name;
                collection.Host = c.Host;
                collections.Add(collection);
            }

            return collections;
        }
    }

    private void CreatePermission(int CollectionId)
    {
        using(var context = new testflowEntities())
        {
            var permissions = from p in context.TF_User_Permissions where p.Collection_Id == CollectionId select p;
            if(permissions.Count() <= 0)
            {
                TF_User_Permissions permission = new TF_User_Permissions();
                permission.Collection_Id = CollectionId;
                permission.User_Id = User.User_Id;
                context.TF_User_Permissions.Add(permission);
                try
                {
                    context.SaveChanges();
                }
                catch(Exception e)
                {

                }
                
            }
        }
    }
}

public enum ItemTypes
{
    Collection,
    Project,
    Suite,
    TestCase,
    Step
}

